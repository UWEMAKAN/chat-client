{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","username","callerName","users","localStream","remoteStream","onMediaStream","stream","localVideo","current","srcObject","volume","info","room","socket","emit","JSON","stringify","on","onUser","startCallButton","removeAttribute","onclick","onStartCall","onOffer","userString","user","parse","setState","prevState","event","setAttribute","onToken","createOffer","offer","createAnswer","connected","rtcOffer","RTCSessionDescription","peerConnection","setRemoteDescription","answer","setLocalDescription","err","console","log","callback","token","RTCPeerConnection","iceServers","addStream","onicecandidate","onIceCandiate","onAddStream","onCandidate","onAnswer","remoteVideo","candidate","rtcCandidate","RTCIceCandidate","addIceCandidate","rtcAnswer","localICECandidates","forEach","push","createRef","acceptCallButton","endCallButton","name","prompt","this","io","connect","navigator","mediaDevices","getUserMedia","video","audio","then","catch","error","ref","muted","id","height","autoPlay","type","disabled","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e644b028.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react';\nimport './App.css';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.socket = createRef();\n    this.startCallButton = createRef();\n    this.acceptCallButton = createRef();\n    this.endCallButton = createRef();\n    this.peerConnection = createRef();\n    this.localICECandidates = createRef([]);\n    this.connected = createRef(false);\n  }\n\n  state = {\n    username: '',\n    callerName: '',\n    users: {},\n    localStream: null,\n    remoteStream: null,\n  }\n  componentDidMount() {\n    let name;\n    do {\n      name = prompt('please enter your name?', '');\n    }\n    while (!name);\n    this.socket.current = io.connect('https://uwem-signal-server.herokuapp.com');\n    navigator.mediaDevices\n    .getUserMedia({ video: true, audio: true })\n    .then((stream) => {\n      this.setState((prevState) => ({\n        ...prevState,\n        localStream: stream,\n        username: name\n      }));\n      this.onMediaStream(stream);\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n  }\n\n  onMediaStream = (stream) => {\n    const { username } = this.state;\n    this.localVideo.current.srcObject = stream;\n    this.localVideo.current.volume = 0;\n    const info = { room: 'test', username };\n    this.socket.current.emit('join', JSON.stringify(info));\n    this.socket.current.on('user', this.onUser);\n    this.socket.current.on('ready', () => {\n      this.startCallButton.current.removeAttribute('disabled');\n      this.startCallButton.current.onclick = this.onStartCall;\n    });\n    this.socket.current.on('offer', this.onOffer);\n  }\n\n  onUser = (userString) => {\n    const user = JSON.parse(userString);\n    this.setState((prevState) => ({\n      ...prevState,\n      users: {\n        user\n      }\n    }))\n  }\n\n  onStartCall = (event) => {\n    this.startCallButton.current.setAttribute('disabled', 'disabled');\n    this.socket.current.emit('token');\n    this.socket.current.on('token', this.onToken(this.createOffer));\n  }\n\n  onOffer = (offer) => {\n    this.socket.current.on('token', this.onToken(this.createAnswer(offer)));\n    this.socket.current.emit('token');\n  }\n\n  createAnswer = (offer) => () => {\n    this.startCallButton.current.setAttribute('disabled', 'disabled');\n    this.connected.current = true;\n    const rtcOffer = new RTCSessionDescription(JSON.parse(offer));\n    this.peerConnection.current.setRemoteDescription(rtcOffer);\n    this.peerConnection.current.createAnswer(\n      (answer) => {\n        this.peerConnection.current.setLocalDescription(answer);\n        this.socket.current.emit('answer', JSON.stringify(answer));\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n  onToken = (callback) => (token) => {\n    this.peerConnection.current = new RTCPeerConnection({\n      iceServers: token.iceServers\n    });\n    this.peerConnection.current.addStream(this.state.localStream);\n    this.peerConnection.current.onicecandidate = this.onIceCandiate;\n    this.peerConnection.current.onAddStream = this.onAddStream;\n    this.socket.current.on('candidate', this.onCandidate);\n    this.socket.current.on('answer', this.onAnswer);\n    callback();\n  }\n\n  onAddStream = (event) => {\n    this.remoteVideo.current.srcObject = event.stream;\n  }\n\n  onCandidate = (candidate) => {\n    const rtcCandidate = new RTCIceCandidate(JSON.parse(candidate));\n    this.peerConnection.current.addIceCandidate(rtcCandidate);\n  }\n\n  onAnswer = (answer) => {\n    const rtcAnswer = new RTCSessionDescription(JSON.parse(answer));\n    this.peerConnection.current.setRemoteDescription(rtcAnswer);\n    this.connected.current = true;\n    this.localICECandidates.current.forEach((candidate) => {\n      this.socket.current.emit('candidate', JSON.stringify(candidate));\n    });\n    this.localICECandidates.current = [];\n  }\n\n  createOffer = () => {\n    this.peerConnection.current.createOffer(\n      (offer) => {\n        this.peerConnection.current.setLocalDescription(offer);\n        this.socket.current.emit('offer', JSON.stringify(offer));\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n  onIceCandiate = (event) => {\n    if (event.candidate) {\n      if (this.connected.current) {\n        this.socket.current.emit('candidate', JSON.stringify(event.candidate));\n      } else {\n        this.localICECandidates.current = [];\n        this.localICECandidates.current.push(event.candidate);\n      }\n    }\n  }\n  \n  render() {\n    return (\n      <>\n        <h1>Video Chat</h1>\n        <video ref={this.localVideo} muted id=\"local-video\" height=\"300\" autoPlay></video>\n        <video ref={this.remoteVideo} id=\"remote-video\" height=\"300\" autoPlay></video>\n        <div>\n          <button type=\"button\" disabled ref={this.startCallButton} id=\"startCall\">Call</button>\n          <button type=\"button\" disabled ref={this.acceptCallButton} id=\"acceptCall\">Accept</button>\n          <button type=\"button\" disabled ref={this.endCallButton} id=\"endCall\">End</button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}