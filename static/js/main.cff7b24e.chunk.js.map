{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","username","callerName","users","localStream","remoteStream","offer","onMediaStream","stream","localVideo","current","srcObject","volume","info","room","socket","emit","JSON","stringify","on","onUser","startCallButton","removeAttribute","onclick","onStartCall","onOffer","onEnd","onHold","userString","user","parse","setState","prevState","event","setAttribute","endCallButton","onToken","createOffer","acceptCallButton","onAcceptCall","createAnswer","holdCallButton","onHoldCall","innerText","remoteVideo","pause","play","onEndCall","disconnect","peerConnection","getSenders","forEach","sender","removeTrack","connected","rtcOffer","RTCSessionDescription","setRemoteDescription","answer","setLocalDescription","err","console","log","callback","token","RTCPeerConnection","iceServers","addStream","onicecandidate","onIceCandiate","onaddstream","onAddStream","onCandidate","onAnswer","candidate","rtcCandidate","RTCIceCandidate","addIceCandidate","rtcAnswer","localICECandidates","push","createRef","this","io","connect","navigator","mediaDevices","getUserMedia","video","audio","then","catch","error","ref","muted","id","height","autoPlay","type","disabled","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cff7b24e.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\n// import {\n//   FiMic,\n//   FiMicOff,\n//   FiVideo,\n//   FiVideoOff,\n//   FiPhoneOff,\n//   FiPhone,\n//   FiPhoneCall,\n//   FiPhoneIncoming,\n//   FiPhoneOutgoing,\n// } from \"react-icons/fi\";\nimport \"./App.css\";\nimport io from \"socket.io-client\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.localVideo = createRef();\n    this.remoteVideo = createRef();\n    this.socket = createRef();\n    this.startCallButton = createRef();\n    this.acceptCallButton = createRef();\n    this.endCallButton = createRef();\n    this.holdCallButton = createRef();\n    this.peerConnection = createRef();\n    this.localICECandidates = createRef([]);\n    this.connected = createRef(false);\n  }\n\n  state = {\n    username: \"\",\n    callerName: \"\",\n    users: {},\n    localStream: null,\n    remoteStream: null,\n    offer: null,\n  };\n  componentDidMount() {\n    let name = \"name\";\n    // do {\n    //   name = prompt('please enter your name?', '');\n    // }\n    // while (!name);\n    this.socket.current = io.connect('https://uwem-signal-server.herokuapp.com');\n    // this.socket.current = io.connect(\"http://localhost:8000\");\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((stream) => {\n        this.setState((prevState) => ({\n          ...prevState,\n          localStream: stream,\n          username: name,\n        }));\n        this.onMediaStream(stream);\n        this.endCallButton.current.onclick = this.onEndCall;\n        this.holdCallButton.current.onclick = this.onHoldCall;\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  onMediaStream = (stream) => {\n    const { username } = this.state;\n    this.localVideo.current.srcObject = stream;\n    this.localVideo.current.volume = 0;\n    const info = { room: \"test\", username };\n    this.socket.current.emit(\"join\", JSON.stringify(info));\n    this.socket.current.on(\"user\", this.onUser);\n    this.socket.current.on(\"ready\", () => {\n      this.startCallButton.current.removeAttribute(\"disabled\");\n      this.startCallButton.current.onclick = this.onStartCall;\n    });\n    this.socket.current.on(\"offer\", this.onOffer);\n    this.socket.current.on(\"end\", this.onEnd);\n    this.socket.current.on(\"hold\", this.onHold);\n  };\n\n  onUser = (userString) => {\n    const user = JSON.parse(userString);\n    this.setState((prevState) => ({\n      ...prevState,\n      users: {\n        user,\n      },\n    }));\n  };\n\n  onStartCall = (event) => {\n    this.startCallButton.current.setAttribute(\"disabled\", \"disabled\");\n    this.endCallButton.current.removeAttribute(\"disabled\");\n    this.socket.current.emit(\"token\");\n    this.socket.current.on(\"token\", this.onToken(this.createOffer));\n  };\n\n  onOffer = (offer) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      offer,\n    }));\n    this.startCallButton.current.setAttribute(\"disabled\", \"disabled\");\n    this.endCallButton.current.removeAttribute(\"disabled\");\n    this.acceptCallButton.current.removeAttribute(\"disabled\");\n    this.acceptCallButton.current.onclick = this.onAcceptCall;\n  };\n\n  onAcceptCall = () => {\n    const { offer } = this.state;\n    this.socket.current.on(\"token\", this.onToken(this.createAnswer(offer)));\n    this.socket.current.emit(\"token\");\n    this.acceptCallButton.current.setAttribute(\"disabled\", \"disabled\");\n    this.holdCallButton.current.removeAttribute(\"disabled\");\n  };\n\n  onHoldCall = () => {\n    if (this.holdCallButton.current.innerText === \"Hold\") {\n      this.remoteVideo.current.pause();\n      this.holdCallButton.current.innerText = \"Unhold\";\n    } else {\n      this.remoteVideo.current.play();\n      this.holdCallButton.current.innerText = \"Hold\";\n    }\n    this.socket.current.emit(\"hold\");\n  };\n\n  onHold = () => {\n    if (this.holdCallButton.current.innerText === \"Hold\") {\n      this.remoteVideo.current.pause();\n      this.holdCallButton.current.innerText = \"Unhold\";\n      this.holdCallButton.current.setAttribute(\"disabled\", \"disabled\");\n    } else {\n      this.remoteVideo.current.play();\n      this.holdCallButton.current.innerText = \"Hold\";\n      this.holdCallButton.current.removeAttribute(\"disabled\");\n    }\n  };\n\n  onEndCall = () => {\n    this.socket.current.emit(\"end\");\n    this.socket.current.disconnect();\n    const senders = this.peerConnection.current.getSenders();\n    senders.forEach((sender) => {\n      this.peerConnection.current.removeTrack(sender);\n    });\n    this.endCallButton.current.setAttribute(\"disabled\", \"disabled\");\n  };\n\n  onEnd = () => {\n    this.socket.current.disconnect();\n    const senders = this.peerConnection.current.getSenders();\n    senders.forEach((sender) => {\n      this.peerConnection.current.removeTrack(sender);\n    });\n    this.endCallButton.current.setAttribute(\"disabled\", \"disabled\");\n  };\n\n  createAnswer = (offer) => () => {\n    this.connected.current = true;\n    const rtcOffer = new RTCSessionDescription(JSON.parse(offer));\n    this.peerConnection.current.setRemoteDescription(rtcOffer);\n    this.peerConnection.current.createAnswer(\n      (answer) => {\n        this.peerConnection.current.setLocalDescription(answer);\n        this.socket.current.emit(\"answer\", JSON.stringify(answer));\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  };\n\n  onToken = (callback) => (token) => {\n    this.peerConnection.current = new RTCPeerConnection({\n      iceServers: token.iceServers,\n    });\n    this.peerConnection.current.addStream(this.state.localStream);\n    this.peerConnection.current.onicecandidate = this.onIceCandiate;\n    this.peerConnection.current.onaddstream = this.onAddStream;\n    this.socket.current.on(\"candidate\", this.onCandidate);\n    this.socket.current.on(\"answer\", this.onAnswer);\n    callback();\n  };\n\n  onAddStream = (event) => {\n    this.remoteVideo.current.srcObject = event.stream;\n  };\n\n  onCandidate = (candidate) => {\n    const rtcCandidate = new RTCIceCandidate(JSON.parse(candidate));\n    this.peerConnection.current.addIceCandidate(rtcCandidate);\n  };\n\n  onAnswer = (answer) => {\n    this.holdCallButton.current.removeAttribute(\"disabled\");\n    const rtcAnswer = new RTCSessionDescription(JSON.parse(answer));\n    this.peerConnection.current.setRemoteDescription(rtcAnswer);\n    this.connected.current = true;\n    this.localICECandidates.current.forEach((candidate) => {\n      this.socket.current.emit(\"candidate\", JSON.stringify(candidate));\n    });\n    this.localICECandidates.current = [];\n  };\n\n  createOffer = () => {\n    this.peerConnection.current.createOffer(\n      (offer) => {\n        this.peerConnection.current.setLocalDescription(offer);\n        this.socket.current.emit(\"offer\", JSON.stringify(offer));\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  };\n\n  onIceCandiate = (event) => {\n    if (event.candidate) {\n      if (this.connected.current) {\n        this.socket.current.emit(\"candidate\", JSON.stringify(event.candidate));\n      } else {\n        this.localICECandidates.current = [];\n        this.localICECandidates.current.push(event.candidate);\n      }\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Video Chat</h1>\n        <video\n          ref={this.localVideo}\n          muted\n          id=\"local-video\"\n          height=\"300\"\n          autoPlay\n        ></video>\n        <video\n          ref={this.remoteVideo}\n          id=\"remote-video\"\n          height=\"300\"\n          autoPlay\n        ></video>\n        <div>\n          <button\n            type=\"button\"\n            disabled\n            ref={this.startCallButton}\n            id=\"startCall\"\n          >\n            Call\n          </button>\n          <button\n            type=\"button\"\n            disabled\n            ref={this.acceptCallButton}\n            id=\"acceptCall\"\n          >\n            Accept\n          </button>\n          <button type=\"button\" disabled ref={this.endCallButton} id=\"endCall\">\n            End\n          </button>\n          <button\n            type=\"button\"\n            disabled\n            ref={this.holdCallButton}\n            id=\"holdCall\"\n          >\n            Hold\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}